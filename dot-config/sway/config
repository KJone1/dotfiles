# Read `man 5 sway` for a complete reference.

### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4
set $mainDisplay DP-1
set $sideDisplay eDP-1
# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l
# Your preferred terminal emulator
set $term kitty --title "Shell"
set $browser flatpak run io.github.zen_browser.zen
set $explorer $term --title 'file explorer' -e lf
# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
# set $menu dmenu_path | wmenu | xargs swaymsg exec --
set $menu wofi | xargs swaymsg exec --

# Default wallpaper (more resolutions are available in @datadir@/backgrounds/sway/)
output * bg /home/kj/wallpapers/abstract.png fill

# Make sure WAYLAND_DISPLAY and XDG_CURRENT_DESKTOP are imported into D-Bus.
exec dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP=sway

workspace_layout tabbed
title_align center
smart_borders on

default_border pixel 1
default_floating_border pixel 1
titlebar_border_thickness 1
titlebar_padding 1
hide_edge_borders --i3 none

### Output configuration
#
#   output HDMI-A-1 resolution 1920x1080 position 1920,0
output $mainDisplay {
  mode 1920x1080@100.047Hz
}
# You can get the names of your outputs by running: swaymsg -t get_outputs

### Idle configuration
#
# exec swayidle -w \
#     before-sleep 'swaylock -f -c 000000'
#
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.

### Input configuration
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.
input type:keyboard {
  xkb_layout "us,il"
  xkb_numlock enabled
  xkb_options "grp:win_space_toggle,caps:escape"
}
input type:touchpad {
  dwt enabled
  tap enabled
  natural_scroll enabled
  middle_emulation enabled
}
### Key bindings
#
# Basics:
#
  # Start a terminal
  bindsym --to-code $mod+return exec $term
  bindsym --to-code $mod+b exec $browser
  bindsym --to-code $mod+f exec $explorer
  bindsym --to-code $mod+n exec $term --title 'neovim' --class 'neovim' -e zsh -c 'source ~/.zshrc && c'
  bindsym --to-code $mod+x exec ~/.config/sway/scripts/wlogout.sh
  # Reload the configuration file
  bindsym --to-code $mod+Shift+r reload
  # Kill focused window
  bindsym --to-code $mod+q kill

  # Start your launcher
  bindsym Mod1+space exec $menu
  # Change brightness
  bindsym XF86MonBrightnessUp exec --no-startup-id brightnessctl s 5%+
  bindsym XF86MonBrightnessDown exec --no-startup-id brightnessctl s 5%-
  # Change volume
  bindsym XF86AudioMute exec $HOME/.config/sway/scripts/pavolume.pl toggle
  bindsym XF86AudioRaiseVolume exec $HOME/.config/sway/scripts/pavolume.pl +5%
  bindsym XF86AudioLowerVolume exec $HOME/.config/sway/scripts/pavolume.pl -5%
  # Drag floating windows by holding down $mod and left mouse button.
  # Resize them with right mouse button + $mod.
  # Despite the name, also works for non-floating windows.
  # Change normal to inverse to use left mouse button for resizing and right
  # mouse button for dragging.
  floating_modifier $mod normal

  bindsym {
    # Capture the currently active output
    Print       exec wl-copy < $(grimshot save output)
    # Capture the currently active window
    Alt+Print   exec wl-copy < $(grimshot save active)
    # Select and capture a custom rectangular area
    Ctrl+Print  exec wl-copy < $(grimshot save area)
  }

#
# Moving around:
#
  # Move your focus around using hjkl
  bindsym $mod+$left focus left
  bindsym $mod+$down focus down
  bindsym $mod+$up focus up
  bindsym $mod+$right focus right
  # Or use $mod+[up|down|left|right]
  bindsym $mod+Left focus left
  bindsym $mod+Down focus down
  bindsym $mod+Up focus up
  bindsym $mod+Right focus right

  # Move the focused window with the same, but add Shift
  bindsym $mod+Shift+$left move left
  bindsym $mod+Shift+$down move down
  bindsym $mod+Shift+$up move up
  bindsym $mod+Shift+$right move right
  # Ditto, with arrow keys
  bindsym $mod+Shift+Left move left
  bindsym $mod+Shift+Down move down
  bindsym $mod+Shift+Up move up
  bindsym $mod+Shift+Right move right
#
# Workspaces:
#
  # Switch to workspace
  bindsym $mod+1 workspace number 1
  bindsym $mod+2 workspace number 2
  bindsym $mod+3 workspace number 3
  bindsym $mod+4 workspace number 4
  bindsym $mod+5 workspace number 5
  bindsym $mod+6 workspace number 6
  bindsym $mod+7 workspace number 7
  bindsym $mod+8 workspace number 8
  bindsym $mod+9 workspace number 9
  bindsym $mod+0 workspace "music"
  # Move focused container to workspace
  bindsym $mod+Shift+1 move container to workspace number 1
  bindsym $mod+Shift+2 move container to workspace number 2
  bindsym $mod+Shift+3 move container to workspace number 3
  bindsym $mod+Shift+4 move container to workspace number 4
  bindsym $mod+Shift+5 move container to workspace number 5
  bindsym $mod+Shift+6 move container to workspace number 6
  bindsym $mod+Shift+7 move container to workspace number 7
  bindsym $mod+Shift+8 move container to workspace number 8
  bindsym $mod+Shift+9 move container to workspace number 9
  bindsym $mod+Shift+0 move container to workspace number 10
  # Note: workspaces can have any name you want, not just numbers.
  # We just use 1-10 as the default.

  # Cycle through workspaces
  bindsym $mod+Tab workspace next_on_output
  bindsym $mod+Shift+Tab workspace prev_on_output
  bindsym $mod+Control+Tab workspace back_and_forth

  bindsym $mod+Control+Shift+$right move workspace to output right
  bindsym $mod+Control+Shift+$left move workspace to output left
  bindsym $mod+Control+Shift+Right move workspace to output right
  bindsym $mod+Control+Shift+Left move workspace to output left

  # Assign apps to workspaces
  assign [app_id="org.mozilla.firefox"] 1
  assign [title="YouTube Music"] music

  # Assign workspaces to output if output is available
  workspace 1 output $mainDisplay $sideDisplay
  workspace music output $sideDisplay

#
# Layout stuff:
#
  # Switch the current container between different layout styles
  # bindsym $mod+s layout stacking
  bindsym $mod+t layout toggle splitv splith tabbed

  # Make the current focus fullscreen
  bindsym F11 fullscreen

  # Toggle the current focus between tiling and floating mode
  bindsym $mod+Shift+space floating toggle

  # Swap focus between the tiling area and the floating area
  # bindsym $mod+space focus mode_toggle

  # Move focus to the parent container
  bindsym $mod+a focus parent
#
# Scratchpad:
#
  # Sway has a "scratchpad", which is a bag of holding for windows.
  # You can send windows there and get them back later.

  # Move the currently focused window to the scratchpad
  bindsym $mod+Shift+minus move scratchpad

  # Show the next scratchpad window or hide the focused scratchpad window.
  # If there are multiple scratchpad windows, this command cycles through them.
  bindsym $mod+minus scratchpad show
#
# Resizing containers:
#
mode "resize" {
  # left will shrink the containers width
  # right will grow the containers width
  # up will shrink the containers height
  # down will grow the containers height
  bindsym $left resize shrink width 10px
  bindsym $down resize grow height 10px
  bindsym $up resize shrink height 10px
  bindsym $right resize grow width 10px

  # Ditto, with arrow keys
  bindsym Left resize shrink width 10px
  bindsym Down resize grow height 10px
  bindsym Up resize shrink height 10px
  bindsym Right resize grow width 10px

  # Return to default mode
  bindsym Return mode "default"
  bindsym Escape mode "default"
}
bindsym $mod+r mode "resize"

#
# Status Bar:
#
bar {
  id 0
  swaybar_command waybar
}
include @sysconfdir@/sway/config.d/*

